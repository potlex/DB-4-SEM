--1
DECLARE
FACULTY_DATA FACULTY%ROWTYPE; 
BEGIN
SELECT * INTO FACULTY_DATA 
FROM FACULTY 
WHERE FACULTY = 'ÈÄèÏ';
DBMS_OUTPUT.PUT_LINE(FACULTY_DATA.FACULTY||' '||FACULTY_DATA.FACULTY_NAME);
END;
/
--2
DECLARE
FACULTY_DATA FACULTY%ROWTYPE; 
BEGIN
SELECT * INTO FACULTY_DATA 
FROM FACULTY;
DBMS_OUTPUT.PUT_LINE(FACULTY_DATA.FACULTY||' '||FACULTY_DATA.FACULTY_NAME);
EXCEPTION
WHEN NO_DATA_FOUND
THEN DBMS_OUTPUT.PUT_LINE('Data not found (ORA '||SQLCODE||')');
WHEN OTHERS
THEN DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/
--3
DECLARE
FACULTY_DATA FACULTY%ROWTYPE; 
BEGIN
SELECT * INTO FACULTY_DATA 
FROM FACULTY;
DBMS_OUTPUT.PUT_LINE(FACULTY_DATA.FACULTY||' '||FACULTY_DATA.FACULTY_NAME);
EXCEPTION
WHEN NO_DATA_FOUND
THEN DBMS_OUTPUT.PUT_LINE('Data not found (ORA '||SQLCODE||')');
WHEN TOO_MANY_ROWS
THEN DBMS_OUTPUT.PUT_LINE('Result consist more than one row (ORA '||SQLCODE||')');
WHEN OTHERS
THEN DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/
--4
DECLARE
FACULTY_DATA FACULTY%ROWTYPE; 
BEGIN
SELECT * INTO FACULTY_DATA 
FROM FACULTY
WHERE FACULTY = 'no';
DBMS_OUTPUT.PUT_LINE(FACULTY_DATA.FACULTY||' '||FACULTY_DATA.FACULTY_NAME);
EXCEPTION
WHEN NO_DATA_FOUND
THEN DBMS_OUTPUT.PUT_LINE('Data not found (ORA '||SQLCODE||')');
WHEN TOO_MANY_ROWS
THEN DBMS_OUTPUT.PUT_LINE('Result consist more than one row (ORA '||SQLCODE||')');
WHEN OTHERS
THEN DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/
--4
DECLARE 
B1 BOOLEAN;
B2 BOOLEAN;
B3 BOOLEAN;
N PLS_INTEGER;
FACULTY_DATA FACULTY%ROWTYPE;
BEGIN
SELECT * INTO FACULTY_DATA 
FROM FACULTY
WHERE FACULTY = 'ÈÄèÏ';
B1 := SQL%FOUND;
B2 := SQL%ISOPEN;
B3 := SQL%NOTFOUND;
N := SQL%ROWCOUNT;
DBMS_OUTPUT.PUT_LINE(FACULTY_DATA.FACULTY||' '||FACULTY_DATA.FACULTY_NAME);
IF B1 THEN DBMS_OUTPUT.PUT_LINE('B1 = TRUE');
ELSE DBMS_OUTPUT.PUT_LINE('B1 = FALSE');
END IF;
IF B2 THEN DBMS_OUTPUT.PUT_LINE('B2 = TRUE');
ELSE DBMS_OUTPUT.PUT_LINE('B2 = FALSE');
END IF;
IF B3 THEN DBMS_OUTPUT.PUT_LINE('B3 = TRUE');
ELSE DBMS_OUTPUT.PUT_LINE('B3 = FALSE');
END IF;
DBMS_OUTPUT.PUT_LINE('N = '||N);
END;
/
--INSERT 
SELECT * FROM TEACHER;
BEGIN
INSERT INTO TEACHER (TEACHER, TEACHER_NAME, PULPIT) VALUES ('PAV', 'Potapovich Aleksey Victorovich', 'ÎÂ');
EXCEPTION
WHEN OTHERS
THEN DBMS_OUTPUT.PUT_LINE('CODE ERROR: '||SQLCODE||' MESSAGE: '||SQLERRM);
END;
/
--INSERT ERROR
SELECT * FROM TEACHER;
BEGIN
INSERT INTO TEACHER (TEACHER, TEACHER_NAME, PULPIT) VALUES ('PAV', 'Potapovich Aleksey Victorovich', 'GFJDFGJ');
EXCEPTION
WHEN OTHERS
THEN DBMS_OUTPUT.PUT_LINE('CODE ERROR: '||SQLCODE||' MESSAGE: '||SQLERRM);
END;
/
--UPDATE
BEGIN 
UPDATE TEACHER SET PULPIT = 'ÈÑèÒ' WHERE TEACHER = 'PAV';
EXCEPTION
WHEN OTHERS
THEN DBMS_OUTPUT.PUT_LINE('CODE ERROR: '||SQLCODE||' MESSAGE: '||SQLERRM);
END;
/
SELECT * FROM TEACHER;
--UPDATE ERROR
BEGIN 
UPDATE TEACHER SET PULPIT = 'FDFSDGSG' WHERE TEACHER = 'PAV';
EXCEPTION
WHEN OTHERS
THEN DBMS_OUTPUT.PUT_LINE('CODE ERROR: '||SQLCODE||' MESSAGE: '||SQLERRM);
END;
/
SELECT * FROM TEACHER;
--DELETE
BEGIN
DELETE FROM TEACHER WHERE TEACHER = 'PAV';
EXCEPTION 
WHEN OTHERS
THEN DBMS_OUTPUT.PUT_LINE('CODE ERROR: '||SQLCODE||' MESSAGE: '||SQLERRM);
END;
/
SELECT * FROM TEACHER;
--DE;ETE ERROR
BEGIN
DELETE FROM TEACHER WHERE TEACHER = 'PAV';
EXCEPTION 
WHEN OTHERS
THEN DBMS_OUTPUT.PUT_LINE('CODE ERROR: '||SQLCODE||' MESSAGE: '||SQLERRM);
END;
/
SELECT * FROM TEACHER;
--6
DECLARE
CURSOR CURS_TEACHER IS 
SELECT TEACHER, TEACHER_NAME, PULPIT FROM TEACHER;
M_TEACHER PAV.TEACHER.TEACHER%TYPE;
M_TEACHER_NAME PAV.TEACHER.TEACHER_NAME%TYPE;
M_PULPIT PAV.TEACHER.PULPIT%TYPE;
BEGIN 
OPEN CURS_TEACHER;
DBMS_OUTPUT.PUT_LINE('ROWS READ: '||CURS_TEACHER%ROWCOUNT);
LOOP
FETCH CURS_TEACHER INTO M_TEACHER, M_TEACHER_NAME, M_PULPIT;
EXIT WHEN CURS_TEACHER%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(M_TEACHER||' '||M_TEACHER_NAME||' '||M_PULPIT);
END LOOP;
DBMS_OUTPUT.PUT_LINE('ROWS READ: '||CURS_TEACHER%ROWCOUNT);
CLOSE CURS_TEACHER;
EXCEPTION 
WHEN OTHERS
THEN DBMS_OUTPUT.PUT_LINE('CODE ERROR: '||SQLCODE||' MESSAGE: '||SQLERRM);
END;
/
--7
DECLARE
CURSOR CURS_SUBJECT IS SELECT * FROM SUBJECT;
REC SUBJECT%ROWTYPE;
BEGIN
OPEN CURS_SUBJECT;
DBMS_OUTPUT.PUT_LINE('ROWS READ: '||CURS_SUBJECT%ROWCOUNT);
FETCH CURS_SUBJECT INTO REC;
WHILE CURS_SUBJECT%FOUND
LOOP
DBMS_OUTPUT.PUT_LINE(REC.SUBJECT||' '||REC.SUBJECT_NAME||' '||REC.PULPIT);
FETCH CURS_SUBJECT INTO REC;
END LOOP;
DBMS_OUTPUT.PUT_LINE('ROWS READ: '||CURS_SUBJECT%ROWCOUNT);
CLOSE CURS_SUBJECT;
END;
/
--8
DECLARE
CURSOR CURS_AUDITORIUM (MIN AUDITORIUM.AUDITORIUM%TYPE, MAX AUDITORIUM.AUDITORIUM%TYPE) IS
SELECT * FROM AUDITORIUM WHERE AUDITORIUM.AUDITORIUM_CAPACITY >= MIN AND AUDITORIUM.AUDITORIUM_CAPACITY <= MAX;
ROW_AUDITORIUM CURS_AUDITORIUM%ROWTYPE;
BEGIN
DBMS_OUTPUT.PUT_LINE('CAPACITY 0-20:');
FOR ROW_AUDITORIUM IN CURS_AUDITORIUM(0,20)
LOOP
DBMS_OUTPUT.PUT_LINE(
ROW_AUDITORIUM.AUDITORIUM||' '||
ROW_AUDITORIUM.AUDITORIUM_NAME||' '||
ROW_AUDITORIUM.AUDITORIUM_CAPACITY
);
END LOOP;

DBMS_OUTPUT.PUT_LINE('CAPACITY 21-30:');
OPEN CURS_AUDITORIUM(21,30);
FETCH CURS_AUDITORIUM INTO ROW_AUDITORIUM;
WHILE (CURS_AUDITORIUM%FOUND)
LOOP
DBMS_OUTPUT.PUT_LINE(
ROW_AUDITORIUM.AUDITORIUM||' '||
ROW_AUDITORIUM.AUDITORIUM_NAME||' '||
ROW_AUDITORIUM.AUDITORIUM_CAPACITY
);
FETCH CURS_AUDITORIUM INTO ROW_AUDITORIUM;
END LOOP;
CLOSE CURS_AUDITORIUM;

DBMS_OUTPUT.PUT_LINE('CAPACITY 31-60:');
OPEN CURS_AUDITORIUM(31,60);
LOOP 
FETCH CURS_AUDITORIUM INTO ROW_AUDITORIUM;
EXIT WHEN CURS_AUDITORIUM%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(
ROW_AUDITORIUM.AUDITORIUM||' '||
ROW_AUDITORIUM.AUDITORIUM_NAME||' '||
ROW_AUDITORIUM.AUDITORIUM_CAPACITY
);
END LOOP;
CLOSE CURS_AUDITORIUM;

DBMS_OUTPUT.PUT_LINE('CAPACITY 61-80:');
FOR ROW_AUDITORIUM IN CURS_AUDITORIUM(61,80)
LOOP
DBMS_OUTPUT.PUT_LINE(
ROW_AUDITORIUM.AUDITORIUM||' '||
ROW_AUDITORIUM.AUDITORIUM_NAME||' '||
ROW_AUDITORIUM.AUDITORIUM_CAPACITY
);
END LOOP;

DBMS_OUTPUT.PUT_LINE('CAPACITY 81+');
FOR ROW_AUDITORIUM IN CURS_AUDITORIUM(81,1000)
LOOP
DBMS_OUTPUT.PUT_LINE(
ROW_AUDITORIUM.AUDITORIUM||' '||
ROW_AUDITORIUM.AUDITORIUM_NAME||' '||
ROW_AUDITORIUM.AUDITORIUM_CAPACITY
);
END LOOP;
END;
/
--9
DECLARE
TYPE AUDIT_CURSOR_TYPE IS REF CURSOR
RETURN AUDITORIUM%ROWTYPE;
C_AUDITORIUM AUDIT_CURSOR_TYPE;
ROW_AUDITORIUM C_AUDITORIUM%ROWTYPE;
BEGIN
OPEN C_AUDITORIUM FOR SELECT * FROM AUDITORIUM;
FETCH C_AUDITORIUM INTO ROW_AUDITORIUM;
WHILE(C_AUDITORIUM%FOUND)
LOOP
DBMS_OUTPUT.PUT_LINE(
ROW_AUDITORIUM.AUDITORIUM||' '||
ROW_AUDITORIUM.AUDITORIUM_NAME||' '||
ROW_AUDITORIUM.AUDITORIUM_CAPACITY
);
FETCH C_AUDITORIUM INTO ROW_AUDITORIUM;
END LOOP;
CLOSE C_AUDITORIUM;
END;
--10
DECLARE
CURSOR CUR_AUD(MIN AUDITORIUM.AUDITORIUM_CAPACITY%TYPE, MAX AUDITORIUM.AUDITORIUM_CAPACITY%TYPE) IS
SELECT AUDITORIUM, AUDITORIUM_CAPACITY FROM AUDITORIUM
WHERE AUDITORIUM_CAPACITY BETWEEN MIN AND MAX FOR UPDATE;
AU AUDITORIUM.AUDITORIUM%TYPE;
AC AUDITORIUM.AUDITORIUM_CAPACITY%TYPE;
BEGIN 
OPEN CUR_AUD(40,80);
FETCH CUR_AUD INTO AU, AC;
WHILE(CUR_AUD%FOUND)
LOOP
AC := AC * 0.9;
UPDATE AUDITORIUM SET AUDITORIUM_CAPACITY = AC
WHERE CURRENT OF CUR_AUD;
DBMS_OUTPUT.PUT_LINE(AU||' '||AC);
FETCH CUR_AUD INTO AU, AC;
END LOOP;
CLOSE CUR_AUD;
END;
/